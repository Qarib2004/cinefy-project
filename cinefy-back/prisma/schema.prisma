generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updatedAt")

  email   String @unique
  password String
  name     String @default("no name")
  avatar   String @default("https://www.pngmart.com/files/23/Profile-PNG-Photo.png")

  role         UserRole @default(USER)
  isHasPremium Boolean  @default(false) @map("is_has_premium")

  favorites Movie[]

  reviews Review[]

  payments Payment[]

  @@map("user")
}

model Movie {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updatedAt")

  title String
  slug  String @unique

  poster    String
  bigPoster String @map("big_poster")

  year     Int    @default(0)
  duration Int    @default(0)
  country  String @default("")

  views Int @default(0)

  videoUrl String @map("video_url")

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  genres  Genre[]
  actors  Actor[]
  reviews Review[]

  @@map("movie")
}

model Genre {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updatedAt")

  name        String
  slug        String @unique
  description String

  icon String

  movie Movie[]

  @@map("genre")
}

model Actor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updatedAt")

  name String
  slug String @unique

  photoUrl String @map("photo_url") @default("https://www.pngmart.com/files/23/Profile-PNG-Photo.png")

  movies Movie[]

  @@map("actor")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updatedAt")
  rating    Int
  text      String

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  movie   Movie?  @relation(fields: [movieId], references: [id])
  movieId String? @map("movie_id")

  @@map("review")
}

model Payment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updatedAt")

  status PaymentStatus @default(PENDING)

  amount Float @default(0)

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  @@map("payment")
}

enum UserRole {
  USER
  ADMIN
}

enum PaymentStatus {
  PENDING
  PAYED
}
